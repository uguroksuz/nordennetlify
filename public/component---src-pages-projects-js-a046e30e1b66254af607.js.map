{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/project-preview.js","webpack:///./src/components/project-preview-grid.js"],"names":["query","ProjectsPage","props","data","errors","projectNodes","projects","mapEdgesToNodes","filter","filterOutDocsWithoutSlugs","title","className","responsiveTitle1","length","nodes","ProjectPreview","styles","root","to","slug","current","leadMediaThumb","mainImage","asset","src","imageUrlFor","buildImageObj","width","height","Math","floor","url","alt","cn","responsiveTitle3","_rawExcerpt","excerpt","blocks","ProjectPreviewGrid","headline","browseMoreHref","grid","map","node","key","id","browseMoreNav","defaultProps"],"mappings":"0FAAA,yIAWaA,EAAK,aA6CHC,UAtBM,SAAAC,GAAU,IACrBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OACd,GAAIA,EACF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAkBA,OAAQA,KAIhC,IAAMC,EACJF,GAAQA,EAAKG,UAAYC,YAAgBJ,EAAKG,UAAUE,OAAOC,KACjE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,aACX,kBAAC,IAAD,KACE,wBAAIC,UAAWC,oBAAf,YACCP,GAAgBA,EAAaQ,OAAS,GAAK,kBAAC,IAAD,CAAoBC,MAAOT,Q,uICjBhEU,MAxBf,SAAyBb,GACvB,OACE,kBAAC,IAAD,CAAMS,UAAWK,IAAOC,KAAMC,GAAE,YAAchB,EAAMiB,KAAKC,SACvD,yBAAKT,UAAWK,IAAOK,gBACpBnB,EAAMoB,WAAapB,EAAMoB,UAAUC,OAClC,yBACEC,IAAKC,YAAYC,YAAcxB,EAAMoB,YAClCK,MAAM,KACNC,OAAOC,KAAKC,MAAO,QACnBC,MACHC,IAAK9B,EAAMoB,UAAUU,OAI3B,wBAAIrB,UAAWsB,YAAGC,mBAAkBlB,IAAON,QAASR,EAAMQ,OACzDR,EAAMiC,aACL,yBAAKxB,UAAWK,IAAOoB,SACrB,kBAAC,IAAD,CAAWC,OAAQnC,EAAMiC,iB,kBCpBnC,SAASG,EAAoBpC,GAC3B,OACE,yBAAKS,UAAWK,IAAOC,MACpBf,EAAMQ,OACL,wBAAIC,UAAWK,IAAOuB,UACnBrC,EAAMsC,eACL,kBAAC,IAAD,CAAMtB,GAAIhB,EAAMsC,gBAAiBtC,EAAMQ,OAEvCR,EAAMQ,OAIZ,wBAAIC,UAAWK,IAAOyB,MACnBvC,EAAMY,OACLZ,EAAMY,MAAM4B,KAAI,SAAAC,GAAI,OAClB,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,EAAmBF,QAI3BzC,EAAMsC,gBACL,yBAAK7B,UAAWK,IAAO8B,eACrB,kBAAC,IAAD,CAAM5B,GAAIhB,EAAMsC,gBAAhB,iBAOVF,EAAmBS,aAAe,CAChCrC,MAAO,GACPI,MAAO,GACP0B,eAAgB,IAGHF","file":"component---src-pages-projects-js-a046e30e1b66254af607.js","sourcesContent":["import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Container from '../components/container'\r\nimport GraphQLErrorList from '../components/graphql-error-list'\r\nimport ProjectPreviewGrid from '../components/project-preview-grid'\r\nimport SEO from '../components/seo'\r\nimport Layout from '../containers/layout'\r\nimport { mapEdgesToNodes, filterOutDocsWithoutSlugs } from '../lib/helpers'\r\n\r\nimport { responsiveTitle1 } from '../components/typography.module.css'\r\n\r\nexport const query = graphql`\r\n  query ProjectsPageQuery {\r\n    projects: allSanityProject(limit: 12, sort: { fields: [publishedAt], order: DESC }) {\r\n      edges {\r\n        node {\r\n          id\r\n          mainImage {\r\n            asset {\r\n              _id\r\n            }\r\n            alt\r\n          }\r\n          title\r\n          _rawExcerpt\r\n          slug {\r\n            current\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst ProjectsPage = props => {\r\n  const { data, errors } = props\r\n  if (errors) {\r\n    return (\r\n      <Layout>\r\n        <GraphQLErrorList errors={errors} />\r\n      </Layout>\r\n    )\r\n  }\r\n  const projectNodes =\r\n    data && data.projects && mapEdgesToNodes(data.projects).filter(filterOutDocsWithoutSlugs)\r\n  return (\r\n    <Layout>\r\n      <SEO title='Projects' />\r\n      <Container>\r\n        <h1 className={responsiveTitle1}>Projects</h1>\r\n        {projectNodes && projectNodes.length > 0 && <ProjectPreviewGrid nodes={projectNodes} />}\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ProjectsPage\r\n","import { Link } from 'gatsby'\r\nimport React from 'react'\r\nimport { cn, buildImageObj } from '../lib/helpers'\r\nimport { imageUrlFor } from '../lib/image-url'\r\nimport BlockText from './block-text'\r\n\r\nimport styles from './project-preview.module.css'\r\nimport { responsiveTitle3 } from './typography.module.css'\r\n\r\nfunction ProjectPreview (props) {\r\n  return (\r\n    <Link className={styles.root} to={`/project/${props.slug.current}`}>\r\n      <div className={styles.leadMediaThumb}>\r\n        {props.mainImage && props.mainImage.asset && (\r\n          <img\r\n            src={imageUrlFor(buildImageObj(props.mainImage))\r\n              .width(600)\r\n              .height(Math.floor((9 / 16) * 600))\r\n              .url()}\r\n            alt={props.mainImage.alt}\r\n          />\r\n        )}\r\n      </div>\r\n      <h3 className={cn(responsiveTitle3, styles.title)}>{props.title}</h3>\r\n      {props._rawExcerpt && (\r\n        <div className={styles.excerpt}>\r\n          <BlockText blocks={props._rawExcerpt} />\r\n        </div>\r\n      )}\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProjectPreview\r\n","import { Link } from 'gatsby'\r\nimport React from 'react'\r\nimport ProjectPreview from './project-preview'\r\n\r\nimport styles from './project-preview-grid.module.css'\r\n\r\nfunction ProjectPreviewGrid (props) {\r\n  return (\r\n    <div className={styles.root}>\r\n      {props.title && (\r\n        <h2 className={styles.headline}>\r\n          {props.browseMoreHref ? (\r\n            <Link to={props.browseMoreHref}>{props.title}</Link>\r\n          ) : (\r\n            props.title\r\n          )}\r\n        </h2>\r\n      )}\r\n      <ul className={styles.grid}>\r\n        {props.nodes &&\r\n          props.nodes.map(node => (\r\n            <li key={node.id}>\r\n              <ProjectPreview {...node} />\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {props.browseMoreHref && (\r\n        <div className={styles.browseMoreNav}>\r\n          <Link to={props.browseMoreHref}>Browse more</Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nProjectPreviewGrid.defaultProps = {\r\n  title: '',\r\n  nodes: [],\r\n  browseMoreHref: ''\r\n}\r\n\r\nexport default ProjectPreviewGrid\r\n"],"sourceRoot":""}